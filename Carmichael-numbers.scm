(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))
(define (carmichael-test n)
  (define (test n times)
    (cond((= times 0) #t)
         ((= (expmod times n n) times) (test n (- times 1)))
         (else #f)))
  (test n (- n 1))) 
(define (square b) (* b b))
